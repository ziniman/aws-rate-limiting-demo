service: rate-limiting-demo

plugins:
  - serverless-python-requirements
provider:
  name: aws
  runtime: python3.9
  stackName: ${self:service}-CF-Template
  logRetentionInDays: 7
  timeout: 5
  region: us-east-1
  memorySize: 128
  iamRoleStatements:
    - Effect: Allow
      Action:
       - dynamodb:Query
       - dynamodb:Scan
       - dynamodb:GetItem
       - dynamodb:PutItem
       - dynamodb:GetRecords
       - dynamodb:GetShardIterator
       - dynamodb:DescribeStream
       - dynamodb:ListStreams
       - dynamodb:UpdateItem
      Resource:
        - Fn::GetAtt:
          - feebackColors
          - Arn
        - Fn::Join:
          - ""
          - - Fn::GetAtt:
              - feebackColors
              - Arn
            - "/stream/*"

  stage: prod
  httpApi:
    cors: true
  logs:
    httpApi:
      format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength", "$context.integrationErrorMessage" }'
  vpc:
    securityGroupIds:
      - sg-0960401dfc8ce7c73
    subnetIds:
      - subnet-031937f50c7fa14c1
      - subnet-0ba536ad50c2a3f66
      - subnet-0e9642d1f62ee79e6
  environment:
    MYSQLHOST: 'xxxxx.rds.amazonaws.com'
    MYSQLPORT: 'xxx'
    MYSQLUSER: 'xxx'
    MYSQLPASS: 'xxxxx'
    MYSQLDATABASE: 'xxxx'


functions:
  GetColors:
    handler: rate_demo.get_colors
    events:
      - httpApi:
          path: /info/get_colors
          method: get
  WriteFeedback:
    handler: rate_demo.write_feedback
    events:
      - httpApi:
          path: /info/store_feedback
          method: post
  StreamData:
    dependsOn : feebackColors
    handler: feedback-color-to-firehose.lambda_handler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [feebackColors, StreamArn]


resources:
  Resources:
    feebackColors:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: color
            AttributeType: S
        KeySchema:
          - AttributeName: color
            KeyType: HASH
        StreamSpecification:
            StreamViewType: NEW_IMAGE
        BillingMode: PAY_PER_REQUEST

    #Cognito
    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: RateLimitingDemoIdentityPool
        AllowUnauthenticatedIdentities: true

    # IAM roles
    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: CognitoIdentityPool
        Roles:
          unauthenticated:
            Fn::GetAtt: [CognitoUnAuthRole, Arn]

    # IAM role used for unauthenticated users
    CognitoUnAuthRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Federated: 'cognito-identity.amazonaws.com'
              Action:
                - 'sts:AssumeRoleWithWebIdentity'
              Condition:
                StringEquals:
                  'cognito-identity.amazonaws.com:aud':
                    Ref: CognitoIdentityPool
                'ForAnyValue:StringLike':
                  'cognito-identity.amazonaws.com:amr': unauthenticated
        Policies:
          - PolicyName: RateLimitingDemoCognitoUnAuthorizedPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'mobileanalytics:PutEvents'
                    - 'cognito-sync:*'
                    - 'cognito-identity:*'
                  Resource: '*'

                # Allow users to invoke our API
                - Effect: 'Allow'
                  Action:
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                  Resource:
                    - Fn::GetAtt:
                      - feebackColors
                      - Arn
